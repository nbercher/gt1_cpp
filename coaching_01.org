#+title: Projet#7 -- C++ sous Linux / Git

* Table of Contents                                              :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#introduction][Introduction]]
- [[#mise-en-place-des-outils-wsl-vs-code][Mise en place des outils (WSL, VS Code)]]
  - [[#environnement-de-travail][Environnement de travail]]
  - [[#installer-wsldebian--outils-linux][Installer WSL/Debian + outils Linux]]
  - [[#installer-vscode--extension-remote---wsl][Installer VSCode + extension "Remote - WSL"]]
  - [[#installer-un-server-xorg][Installer un server Xorg]]
- [[#mise-en-place-des-fichiers-de-travail-githubcom-et-git-local][Mise en place des fichiers de travail (Github.com et Git local)]]
- [[#mise-en-place---épilogue][Mise en place - Épilogue]]
- [[#programmation-orientée-objet][Programmation orientée objet]]
  - [[#introduction-1][Introduction]]
  - [[#exemple-de-classe][Exemple de classe]]
  - [[#vie-et-mort-dun-object][Vie et mort d'un object]]
  - [[#méthodes-spéciales-constructeur-et-destructeur][Méthodes spéciales: Constructeur et Destructeur]]
  - [[#accès-aux-membres-et-méthodes-dun-objet][Accès aux membres et méthodes d'un objet]]
- [[#objectifs-pour-le-prochain-coaching][Objectifs pour le prochain coaching]]
#+END_QUOTE

* Introduction                                                   :noexport_1:
** Travail à réaliser durant le projet

 - Réalisation du *Jeux Snake*
   - Un grand classique existant sur tout type de supports
   - À jouer au clavier dans une fenêtre en mode graphique

   Note: Specs techniques du jeu fournies en temps voulu.

 - Développement en *Langage C++ / Environnement Linux*

   - _Versionnement_ avec *Git* et _partage_ avec *Github.com*

   - Utilisation du Shell *Bash* et des outils en *ligne de commande*

** Organisation Générale [0%]                          :TODOélèves:TODOcoach:

 - Classe découpée en Groupes A et B
 - [ ] Constitution des binômes (voire trinômes, me contacter):
   - [ ] Mettez à jour le fichier Google Drive "Constitution des binômes"
     - [ ] Tout le monde est dans un binôme ?
       - [ ] Groupe A
       - [ ] Groupe B

   - *IMPORTANT*: Binômes & Numéros des binômes *ne devront plus changer ensuite*!
     (Si problème contacter Alain Simac ou moi-même)

 - *Coachings* (présentiel): lundi, mercredi, vendredi (matin)
 - *F.A.Q.* (distanciel): vendredi après-midi (sem. 1, 2 et 3)
 - *Soutenances* les <2022-02-10 jeu.> et <2022-02-11 ven.>

 - Discord + *E-mail*: communication écrite + F.A.Q.

 - *Nouveauté*: Mes documents dispos sur Github.com:

   https://github.com/nbercher/gt1_cpp

   Remarque: Vous pourrez également cloner mon dépôt avec Git:
   #+BEGIN_SRC sh
     git clone https://github.com/nbercher/gt1_cpp coach
   #+END_SRC

   Et vous mettre à jour à tout moment: =git pull=

** Comment nous allons travailler

 - Coachings présentiels

   - Partie cours (mais pas tout le temps)

   - Beaucoup de pratique, entraide entre élèves encouragée (qque soit le binôme)

   - *Objectifs pour le prochain coaching*

 - Entre les coachings

   - *Vous travaillez en autonomie sur votre projet*

   - Vous vous entraidez pour cela (discutez de vos difficultés, vos solutions, etc.)

   - F.A.Q.: C'est la "Foire Aux Questions"
     - Venez avec vos questions, vos besoins, etc.

** Planning et Livrables

 - Semaine 1: Mise en place, Bases C++ & POO
   - Mise en place: WSL, VS Code, outils Linux, etc.
   - Bases du langage C++ et POO
   - <2022-01-19 mer.> *Livrable: Dépôt Github.com* 
   - <2022-01-21 ven.> Diagramme UML de vos classes d'objets
     - BUG: Se fera plus tard!
   - Si possible on commencera:
     - Snake: SDL2 clavier & affichage

 - Semaine 2: Snake: SDL2 clavier & affichage, boucle du jeu, classes & objets
   - <2022-01-26 mer.> *Évaluation Git*
   - <2022-01-28 ven.> *Livrable: "Déplacement d'un seul carré" (la tête du snake)*

 - Semaine 3: Snake: Classes & objets pour gestion du ver et collisions
   - <2022-02-02 mer.> Gestion du ver fonctionnelle
   - <2022-02-04 ven.> *Livrable: Version beta du jeu Snake*

 - Semaine 4: Finalisations du jeu Snake, Soutenances
   - <2022-02-09 mer. 23:59> *Livrable: Version finale du jeu Snake*
   - <2022-02-10 jeu.> et <2022-02-11 ven.> *Soutenances*

** Notation & Soutenance

 - Notation:
   - *Évaluation Git*: Maîtrise Git + Github.com
   - Qualité de la soutenance
   - Jeux Snake:
     - Conforme aux demandes, jouable, sans bugs
     - Code lisible, propre et optimisé
     - Utilisation et maîtrise pour la création de: Langage C++, librarie SDL2
     - Maîtrise des outils (environnement Langage C++, SDL2)
     - Bonus: Options rajoutées au jeu

 - Soutenances:
   - Dans la forme: ~15 minutes/binôme
     - Préparer des slides
     - Dans un binôme chaque élève doit présenter (présentation à répartir)
     - Expression, vocabulaire, orthographe
   - Dans le fond:
     - Votre maîtrise du sujet
     - Votre compréhension des potentiels problèmes non-résolus
     - Le point sur votre marge de progression et d'amélioration

* Mise en place des outils (WSL, VS Code)       :noexport_2:
** Environnement de travail

 1. WSL/Debian + g++ Linux = *Environnement obligatoire pour tous!*

    *Je veux que tout le monde utilise les mêmes outils*

 2. *Vous devrez écrire du code C++ pour Linux*

    Je ne veux pas de code écrit pour Windows!

 3. *Votre code devra se compiler sous WSL et avec =g++=*

 4. Utilisation de *VS Code en mode WSL* (ou Emacs)

    Seul choix possible pour vous: l'éditeur "VS Code" ou "Emacs"

*ATTENTION: Pénalités pour les binômes qui ne respecteraient pas ces points*

** Installer WSL/Debian + outils Linux                           :TODOélèves:

 1. Depuis le menu Windows, lancez PowerShell en mode administrateur

 2. Dans le terminal PowerShell, exécutez la commande:
    =wsl --install -d debian=

 3. WSL vous demande de créer votre compte Linux (avec un login et mot de passe)
    - *Demande de créer un compte (login/username + password)*
    - Rien n'apparaît quand on saisi le password, c'est normal! [=Ctrl+U= efface la saisie invisible]

 4. *Laissez WSL terminer son installation*

 5. Relancez WSL: Vous devez utiliser votre compte utilisateur Linux fraîchement créé

    Note: Si la session Linux se lance avec "root@..." dans le prompteur, ce n'est pas bon: quittez WSL
    et relancez.  Vérifiez que vous l'avez laissé s'installer (étape 4.)

 6. Testez =cat /etc/debian_version= et donnez-moi le numéro de version affiché

 7. Dans WSL, installez les progammes nécessaire (Cf. CdC):

    =sudo apt-get update=
    =sudo apt-get install man make g++ git openssh-client libsdl2-dev=

** Installer VSCode + extension "Remote - WSL"                   :TODOélèves:

 1. Si VS Code est déjà installé, *désinstallez-le*!

 2. *Sous Windows*, installez VS Code, *IMPORTANT*:
    Dans la partie "Select Additional Tasks", prenez bien soin de *cocher la case "Add to PATH"*

 3. Lancez VS Code et installez l'extension "Remote - WSL" de Microsoft

 4. Dans WSL: testez VS Code:

    =code .=

    Si vous avez l'erreur "Command not found" c'est que vous n'avez pas fait correctement le
    point 2. et/ou le point 3.

    Au besoin, voir:
    - https://code.visualstudio.com/docs/remote/wsl
    - https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl

** Installer un server Xorg                                      :TODOélèves:
On utilisera le même serveur que pour le projet-2 "Langage C".

 - Un serveur Xorg permet d'afficher une fenêtre graphique Linux sous Windows.

 - Sous Windows, installation du server "Xorg" VcxSrv:

   - Installer https://sourceforge.net/projects/vcxsrv/ en cliquant sur "Suivant" à chaque étape.

   - Lancez VcxSrv (cliquez sur "Suivant" à chaque étape, jusqu'à "Terminer").
     - IMPORTANT: *Cette application n'affiche pas de fenêtre une fois lancée.* Vous constaterez
       cependant que le service est lancé grace à l'icone "X" près de l'horloge de Windows.

 - Test:

   1. Vérifiez que VcxSrv est bien lancé: son icone doit apparaître à côté de l'horologe de Windows.

   2. Affichez une fenêtre minimaliste avec =xmessage=:

   #+BEGIN_SRC sh
     sudo apt update
     sudo apt install xmessage
     DISPLAY=:0 xmessage 'Hello!'
   #+END_SRC

 - Utilisation:

   Il suffit de préfixer les commandes lançant une application Linux graphique par

   #+BEGIN_SRC sh
     DISPLAY=:0
   #+END_SRC

   Plus tard pour votre jeu Snake:

   #+BEGIN_SRC sh
     DISPLAY=:0 ./snake &
   #+END_SRC

 - Configuration permamente, *à faire une seule fois*:

   #+BEGIN_SRC sh
     echo "export DISPLAY=:0" >> ~/.bashrc
   #+END_SRC

* Mise en place des fichiers de travail (Github.com et Git local) :noexport_1:
** Contributions *individuelles* et contributions *collectives*

 - Vous allez *commencer à développer en apprenant*:

   1) Vous serez en phase d'apprentissage: *code testé individuellement et qui change souvent*

   2) *Vous développerez* les fonctionnalités petit à petit, *par petits morceaux*

   3) Quand un bout de code deviendra satisfaisant:

      * Il sera commité avec Git et donc partagé avec son binôme

      * Il faut être raisonnable et trouver son équilibre entre *committer trop souvent / trop peu souvent*

** Structure des fichiers du projet

 - Mise en place des fichiers: ***VOUS DEVEZ TOUS AVOIR LA MÊME STRUCTURE DE DOSSIERS***

   #+BEGIN_EXAMPLE
    ~/proj7/    <- Rappel: =~/= = =/home/eleveX/=
      ├ coach/  <- =git clone https://github.com/nbercher/gt1_cpp= (Optionel)
      └ snake/  <- =git clone git@github.com:MON_COMPTE_GITHUB/gtech1-bXX-snake.git snake= (Étape 4 du HowTo Git)
        ├ ÉLÈVE1/        <- Fichiers de l'élève1 (=contributions individuelles)
        │ ├ fichier.cpp
        │ └ fichier.hpp
        ├ ÉLÈVE2/        <- Fichiers de l'élève2 (=contributions individuelles)
        │ ├ fichier.cpp
        │ └ fichier.hpp
        ├ fichier.cpp    <- Fichiers du jeu Snake en phase de construction (=contributions collectives)
        ├ fichier.hpp
        ├ Makefile
        ├ ...
   #+END_EXAMPLE

   En résumé:
   - =~/proj7/snake/ÉLÈVE1/= : fichiers d'élève1
   - =~/proj7/snake/ÉLÈVE2/= : fichiers d'élève2
   - =~/proj7/snake/= : fichiers du jeu
   - =~/proj7/coach/= : fichiers du coach

 - Fonctionnement et utilisation:

   - Au début, *je développe dans mes fichier(s) individuel(s)*
     - *Je commite mes fichiers* et ils sont partagés avec mon binôme

   - Le code progresse et devient intéressant:
     - Le binôme s'organise pour copier le code intéressant dans les fichiers du jeu

** Rappels: Qu'est-ce que le Shell Bash?

 - Le Shell Bash est souvent appelé par abus de langage un "Terminal"

 - Pour y accéder, plusieurs choix:

   1. *Lancer WSL*: la fenêtre de terminal ainsi lancée vous accueille avec le Shell Bash

   2. Dans *VS code en mode WSL*: Créer un Terminal en mode "WSL/Debian"

 - Les deux méthodes sont équivalentes dans le sens où *vous dialoguez avec le même environnement*

** Création de l'espace de travail (et exercices Shell Bash) :TODOélèves:

 1. Lancez le Shell Bash de votre choix

 2. Avec =pwd=: Où suis-je? (pwd = Print Working Directory)
    - Juste après le lancement d'un Shell, que cela donne-t-il?
    :SOLUTION:
    #+BEGIN_EXAMPLE
    /home/MON_LOGIN/
    #+END_EXAMPLE
    :END:

 3. Avec =mkdir=: Créez votre dossier principal =~/proj7=
    :SOLUTION:
    #+BEGIN_SRC sh
      mkdir ~/proj7
    #+END_SRC
    :END:

 4. Avec =ls=: Listez le contenu du dossier courant
    - Liste simple
    - Liste étendue (option =-l=)
    - Liste des fichiers et dossiers cachés
    :SOLUTION:
    #+BEGIN_SRC sh
    ls    # liste simple
    ls -l # liste étendue (format long avec détails: permissions, ownership, taille, date)
    ls -a # lister les fichiers cachés
    #+END_SRC
    :END:

 5. Avec =cd=: Changer de dossier: allez dans =~proj7/=
     :SOLUTION:
     #+BEGIN_SRC sh
       cd ~/proj7 # Aller dans le sous-dossier proj7/ de mon 'home directory'
       # Ou encore:
       cd        # Aller dans mon 'home directory'
       cd proj7/ # Aller dans le sous-dossier proj7/ qui s'y trouve
     #+END_SRC
     :END:

 6. Avec =ls=: Listez à nouveau le contenu du dossier courant

 7. Avec =cd=: Revenez dans votre 'home directory'
    - En utilisant =~=
    - En utilisant =..= (=dossier parent)
    :SOLUTION:
    #+BEGIN_SRC sh
      cd ~/  # Aller mon 'home directory'
      # Ou encore:
      cd ..  # Aller le dossier parent (OK si je suis dans ~proj7/)
    #+END_SRC
    :END:

 8. Avec =cd=: Retournez dans =~proj7/=

 9. Avec =git=: Clonez le dépôt du coach sous le nom de dossier =coach=
    Rappel commande: =git clone  URL_DEPOT_DISTANT  NOM_DOSSIER_LOCAL=
    :SOLUTION:
    #+BEGIN_SRC sh
      git clone  https://github.com/nbercher/gt1_cpp  coach
    #+END_SRC
    :END:

** Rappels: Qu'est-ce que Git?

 - Outil créé par par Linus Torvalds en 2005, créateur de Linux, pour
   continuer à développer Linux

 - Grands principes:

   - Git travaille à l'échelle d'un dossier de départ et se préoccupe uniquement de ses sous-dossiers et
     sous-fichiers

   - Git enregistre les changements des fichiers dans des "commits"

   - Les commits s'enchainent (analogue à une blockchain), ils forment une histoire des fichiers
     = "versionnement"

   - Git permet de transférer les commits par le réseau et à des utilisateurs de synchoniser leur travail

   - Git sait fusionner (merge) les codes sources édités par plusieurs personnes en même temps

 - Usages de Git:

   1. Versionner le code source: enregistrement des changements importants et à préserver

   2. Synchroniser les dépôts (ex: avec Github.com)

** Mise en place dépôts Git + Github                             :TODOélèves:

 - Allez dans =~/proj7/= et continuez avec la mise en place du dépôt Github.com et Git local

 - Ça se passe dans [[file:howto-git.org::#configuration-de-git-et-du-git-workflow-jeu-snake][howto-git.org]], section "Configuration de Git et du "Git workflow" (jeu Snake)"

 - *Vous devez être rigoureux et suivre chacune des étapes!*

* Mise en place - Épilogue

Dans la pratique, vous allez utiliser:

 - *VS Code* pour éditer le code (ou Emacs)

 - Le "Terminal WSL" ou le "Terminal VS Code" (en mode WSL) pour:
   - Compiler votre code (g++, make)
   - Versionner votre code (Git)

 - *g++* pour *compiler* le code
   - *make* pour *automatiser* la compilation

 - *git* pour *versionner* les codes sources
   (Mais aussi: le Makefile et tout autre fichier important)

 - *git* et *Github.com* pour partager les codes sources dans le binôme
   (Et avec le coach)

 - IMPORTANT: *Se familiariser les rudiments du Shell* (pwd, cd, mkdir, git, etc.)

* Programmation orientée objet
** Introduction

 - C++ est une évolution du Langage C, il apporte la Programmation Orientée Objet (POO)

   Note: On peut mélanger du code C et C++

 - En POO, le paradigme change:

   - On utilise des *classes* pour définir des types complexes, elles contiennent:

     - Des *membres* qui sont des variables, elles-même d'un certain type (classe, int, char, etc.)

     - Des *méthodes* qui sont des fonctions dédiées et s'appliquent aux objet de la classe ou à la
       classe elle-même

   - Les classes étant un type, elles permettent de créer des variables, on les appelle *objets*:

     =MaClasse object;=

** Exemple de classe

=MaClasse= contient:
 - Un nombre entier =int a;=, il est privé (personne ne peut y accéder à part l'objet)
 - Une méthode =int add(int b);= qui retourne =a + b=

   #+BEGIN_SRC C++
     class MClasse {
     public:
       int add(int b)  // méthode publique car définie dans le bloc 'public:'
       {
         return this->a + b; // "this" est un pointeur sur l'objet lui-même, "->" permet d'accéder à ses membres
       }
     private:
       int a;          // membre privé car défini dans le bloc 'private:'
     }; // Ne pas oublier le ';' final !
   #+END_SRC

Le parallèle entre C et C++ est relativement simple:

 - Type versus Classe:

   =int x; // variable de type int=

   =MaClasse object; object de type MaClasse=

 - Fonction versus Méthode:

   =void add(int a, int b) { return a + b; } // returne a + b=

   =object.add(int b); // retourne object.a + b=

** Vie et mort d'un object

 - Les objets peuvent être crées comme des variables dynmaiques ou non:

   #+BEGIN_SRC C++
     void some_code(void) {
       MaClasse obj1; // Objet "statique", il mourra en fin du bloc de code {}

       MaClasse *obj2 = new MaClasse(); // Objet dynamique qu'il faudra détruire

       if (obj2 != NULL)
         delete obj2;
     } // <- Au delà de ce bloc, obj1 est détruit automatiquement car "statique", ce n'est pas le cas de obj2
   #+END_SRC

 - Nous venons de voir les deux opérateurs:

   1. =new= permettant de créer un objet dynamiquement (donne un pointeur)

   2. =delete= permettant de détruire un objet créé dynamiquement (via un pointeur seulement)

** Méthodes spéciales: Constructeur et Destructeur

   #+BEGIN_SRC C++
     class MClasse {
     public:

       MClasse() {     // <- Constructeur, ici initialise le membre =a=
         this->a = 0;
       }

       ~MClasse() {     // <- Destructeur, ici ne fait rien...
       }

     private:
       int a;
     };
   #+END_SRC

Simple et efficace:
 - Le constructeur est appelé quand un objet est crée
 - Le Destructeur est appelé quand un objet est détruit

Les deux permettent d'effectuer des opérations spécifique *après création* et *avant suppression*.

** Accès aux membres et méthodes d'un objet

#+BEGIN_SRC C++
  class MClasse {
  public:
    int a;             // <- Maintenant publique!
    int add(int b) {
      return this->a + b;
    }
  };

  // Cas avec objet "statique":
  MaClasse obj1;
  obj1.a = 1; // <- OK si a est publique dans la classe MaClasse
  int c = obj1.add(5);

  // Cas avec objet "statique":
  MaClasse *obj2 = new MaClasse();
  obj2->a = 2;
  int d = obj2->add(3);

#+END_SRC

* Objectifs pour le prochain coaching                            :TODOélèves:

 1. ***Travaillez entre les séances!***

    Vous avez 10h/sem de C++ et 4h~8h de langues = 14h~18h/sem

    *Le reste du temps = travaillez sur votre projet autant que possible!*

 2. *IMPORTANT*: Dépôts Git (locaux) et Github.com (mirroirs) créés et fonctionnels

    1. Reportez-vous au [[file:howto-git.org][Howto Git]] en cas de besoin

    2. *Chaque élève devra avoir configuré et testé ceci*:

       - Test 1 du howto: Synchro entre votre *dépôt local* et son *miroir Github.com*

         =git pull= et =git push=

       - Test 2 du howto: =git pull= croisés entre élèves du binôme

         =git pull ALIAS_AUTRE_ELEVE main=

         Équivalent à: Mon PC <--pull-- Github.com "autre élève"

       - Votre fichier =~/proj7/snake/.git/config= doit ressembler à ceci:
         :GITCONFIG:
         #+BEGIN_EXAMPLE
         ...
         [remote "origin"]
                 url = git@github.com:MON_COMPTE_GITHUB/gtech1-bXX-snake.git
                 fetch = +refs/heads/*:refs/remotes/origin/*
         [branch "main"]
                 remote = origin
                 merge = refs/heads/main
         [remote "ALIAS_AUTRE_ELEVE"]
                 url = https://github.com/COMPTE_AUTRE_ÉLÈVE/gtech1-bXX-snake.git
                 fetch = +refs/heads/*:refs/remotes/origin/*
         #+END_EXAMPLE
         :END:

 3. *Travaillez en autonomie* le C++, avec des ressources en ligne!

    Exemple: Compilation + exécution d'un [[https://fr.wikibooks.org/wiki/Programmation_C++/Un_premier_programme][code écrit en C++]] dans le fichier =hello.cpp=:
    1. Coder =hello.cpp=:
       #+BEGIN_SRC c++
         #include <iostream>
         using namespace std

         int main(void) {
             cout << "Hello!" << endl;
             return 0;
         }
       #+END_SRC
    2. Compiler: =g++ helloc.cpp -o hello=
    3. Exécuter: =./hello=

 4. *Familiarisez-vous* avec le Shell Bash, Git, etc.

* settings                                                          :ARCHIVE:noexport:
#+startup: overview
** Local variables
# Local Variables:
# fill-column: 105
# End:
